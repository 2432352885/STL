泛型编程 抽象概念库
    以抽象概念为主体而非实际类 形成一个严谨的接口标准
    用迭代器或者接配器互相接配起来 组件之间都有最大的独立性

C++ class允许自行定义型别 template可以将型别参数化 两者结合并透过traits编程技巧 
    形成STL的绝佳温床

Class允许程序员通过指针以极佳弹性处理内存  正是即要求一般化(泛型)又不是效能的一个关键

STL的六大组件
    1、容器(containers) 用来存放数据的各种数据结构 是一种class template可以将型别参数化
    2、算法(algorithms) function template
    3、迭代器(iterators) 容器和算法之间的胶合器 泛型指针 容器都带有自己专属的iterator
    4、仿函数(functors) 重载了operator()的class或class template 一般函数指针可视为狭义的仿函数
        函数指针：int(*fp) (int a); 定义了一个指向函数(参数为int类型 返回值int类型)的指针类型fp
    5、配接器(adapters) 一种用来修饰容器或者仿函数后迭代器接口的东西 不同的修饰 在不同修饰之后加 ~ adapter
    6、配置器(allocators) 负责空间配置和管理 实现动态空间配置、空间管理、空间释放的class tmplate 

